set nocompatible
filetype off

let g:embark_terminal_italics = 1
let g:embark_termcolors= 256
set t_Co=256
set termguicolors
set background=dark
colorscheme tokyonight-storm

"set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
"autocmd BufReadPost,FileReadPost * normal zR

" GOYO
let g:goyo_width = 128

let g:python3_host_prog = '/home/mevans/.pyenv/versions/neovim/bin/python'

let g:ale_use_global_executables = 0
let g:ale_disable_lsp = 1
let g:ale_completion_enabled = 0
let g:starify_session_persistence = 0
let g:startify_session_autoload = 0
let g:test#strategy = "vimux"
let NERDTreeHijackNetrw = 1
set guicursor=

" NERDcomment
let g:NERDDefaultAlign = 'left'
let g:startify_session_before_save = [ 'silent! tabdo NERDTreeClose' ]
let g:startify_update_oldfiles = 1
let g:startify_files_number = 5
let g:startify_lists = [
  \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
  \ { 'type': 'sessions',  'header': ['   Sessions']       },
  \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
  \ { 'type': 'commands',  'header': ['   Commands']       },
  \ { 'type': 'files',     'header': ['   MRU']            },
\ ]
set sessionoptions-=blank
let g:startify_custom_header =
      \ 'startify#center(startify#fortune#cowsay())'

" INSTANT MARKDOWN
let g:instant_markdown_autoscroll = 1
let g:instant_markdown_slow = 0
let g:instant_markdown_mathjax = 1

" ALE
let g:ale_linters = {}
let g:ale_python_auto_pipenv = '1'
let g:ale_linters.cpp = ['gcc']
"let g:ale_linters.python = ['mypy', 'flake8']
let g:ale_linters.python = ['flake8', 'mypy']
let g:ale_fixers = { '*': ['remove_trailing_lines', 'trim_whitespace']}
"let g:ale_fixers = {'*.vue': []}
let g:ale_fixers.pandoc = []
let g:ale_fixers.python = ['black', 'isort']
", 'black'] }
"let b:ale_fixers = ['black']
"
let g:ale_python_pylint_options="--ignore import-error"
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 0
let g:ale_fix_on_save = 1
let g:ale_python_mypy_ignore_invalid_syntax = 1
let g:ale_lint_on_save = 1
let g:ale_echo_msg_error_str = 'E'
"let g:black_linelength = 127
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %code%: %s [%severity%]'
let g:ale_statusline_format = ['✖ %d', '⚠ %d', '']
let g:ale_open_list = 1
"let g:ale_echo_cursor = 0
let g:ale_lint_on_enter = 1
let g:ale_list_window_size = 4
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_delay = 5
let g:ale_sign_column_always = 0
let g:ale_max_signs = 1


" prevent quickfix from being added to buflist
augroup qf
    autocmd!
    autocmd FileType qf set nobuflisted
augroup END

" Sets how many lines of history VIM has to remember
set history=700

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","
let maplocalleader = "."

" Fast saving
nmap <leader>w :w!<cr>

" fast commenting
map cc <leader>c<space>

" CtrlP keybinds
"nmap <leader>b :CtrlPBuffer<CR>
"nmap <leader>f :CtrlP<CR>
"nmap <leader>m :CtrlPMRU<CR>


inoremap jj <Esc>
nnoremap <Leader>l :lnext<CR>
nnoremap <Leader>ll :ll<CR>
nnoremap <Leader>lp :lp<CR>
nnoremap <Leader>gc :Git commit % <CR>
nnoremap <Leader>gd :Git diff<CR>
nnoremap <Leader>gb :Git Gblame<CR>
nnoremap <Leader>gs :Git<CR>
nnoremap <Leader>o :noh<CR>
nmap <localleader>ww <Plug>VimwikiIndex
nmap <localleader>www <Plug>VimwikiDiaryMakeNote

nnoremap <leader>ff <cmd>Telescope find_files hidden=true<cr>
nnoremap <leader>fg <cmd>Telescope live_grep hidden=true<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>
nnoremap <leader>fs <cmd>Telescope grep_string<cr>
nnoremap <leader>gr <cmd>Telescope lsp_references<cr>


" get rid of number incrementing in normal mode
nnoremap . <NOP>
nnoremap <C-a> <NOP>
nnoremap <C-x> <NOP>


" Use 256 colours (Use this setting only if your terminal supports 256 colours)
"set t_Co=256

" numbers
set relativenumber
:au FocusLost   *  :set number
:au FocusGained *  :set relativenumber

" Set 10 lines to the cursor - when moving vertically using j/k
set so=10

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

"Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound onronkrrors
set noerrorbells
set novisualbell
set t_vb=
set tm=500


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable
"set background=dark
"let base16colorspace=256  " Access colors present in 256 colorspace

hi clear SpellBad
hi SpellBad cterm=underline,bold ctermfg=DarkGray ctermbg=yellow
set t_md=


" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set backup
set backupdir=$HOME/.config/nvim/backup
set undofile
set undodir=$HOME/.config/nvim/undo
set nowb
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=2

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set nowrap "Wrap lines
set incsearch

au BufRead,BufNewFile *.txt,*.tex set wrap linebreak nolist textwidth=0 wrapmargin=0 noautoindent
au BufRead,BufNewFile *.md,*.rst set wrap linebreak nolist textwidth=80 wrapmargin=0 noautoindent

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

map <leader><Tab> :bn<cr>
map <localleader><Tab> :tabnext<cr>

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

autocmd FileType make set tabstop=2 shiftwidth=2 softtabstop=0 noexpandtab
" Remember info about open buffers on close
"set viminfo^=%
set laststatus=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap VIM 0 to first non-blank character
"map 0 ^

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vimgrep searching and cope displaying
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSelection('gv')<CR>

" Open vimgrep and put the cursor in the right position
map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

" Vimgreps in the current file
"map <leader><space> :vimgrep // <C-R>%<C-A><right><right><right><right><right><right><right><right><right>

" When you press <leader>r you can search and replace the selected text
"vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>

" Do :help cope if you are unsure what cope is. It's super useful!
"
" When you search with vimgrep, display your results in cope by doing:
   "<leader>cc
"
" To go to the next search result do:
"   <leader>n
"
" To go to the previous search results do:
"   <leader>p
"
map <leader>cc :botright cope<cr>
map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
map <leader>n :cn<cr>
map <leader>p :cp<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>
let g:lexical#spelllang = ['en_gb']

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=
map <leader>t :NERDTreeToggle<CR>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

set mouse=c

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    emenu Foo.Bar
    exe "menu Foo.Bar :" . a:str
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction


" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" From help:ale_open_list, close loclist when buffer closes
augroup CloseLoclistWindowGroup
    autocmd!
    autocmd QuitPre * if empty(&buftype) | lclose | endif
augroup END

if exists('g:loaded_webdevicons')
  call webdevicons#refresh()
endif
